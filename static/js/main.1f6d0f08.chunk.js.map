{"version":3,"sources":["utils/Config.js","context/Context.js","pages/AddContact.js","context/Actiontype.js","components/Contact.js","pages/Contacts.js","layout/Header.js","layout/Footer.js","pages/ViewContact.js","pages/PageNotFound.js","context/Reducer.js","App.js","serviceWorker.js","index.js"],"names":["imgConfig","quality","maxWidth","maxHeight","autoRotate","contactContext","createContext","AddContact","useContext","state","dispatch","contactToUpdate","contactToUpdateKey","history","useHistory","useState","date","setDate","time","setTime","description","setDescription","isUploading","setIsUploading","downloadUrl","setDownloadUrl","star","setStar","isUpdate","setIsUpdate","useEffect","picture","imagePicker","e","a","file","target","files","metadata","contentType","type","console","log","name","readAndCompressImage","resizedImage","firebase","storage","ref","storageRef","uploadTask","child","put","on","TaskEvent","STATE_CHANGED","snapshot","progress","bytesTransferred","totalBytes","TaskState","PAUSED","RUNNING","toast","error","code","getDownloadURL","then","downloadURL","catch","err","addContact","database","v4","set","updateContact","Container","fluid","className","Row","Col","md","Form","onSubmit","preventDefault","payload","key","push","Spinner","color","htmlFor","src","alt","id","accept","multiple","onChange","FormGroup","Input","placeholder","value","check","Label","checked","Button","block","Contact","contact","contactKey","onClick","update","remove","Contacts","contacts","isLoading","length","ListGroup","Object","entries","map","ListGroupItem","Header","Navbar","light","NavbarBrand","tag","Link","to","NavbarText","Footer","ViewContact","Card","CardBody","height","width","CardTitle","PageNotFound","action","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initialState","App","useReducer","reducer","getContacts","contactsRef","val","Provider","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1f6d0f08.chunk.js","sourcesContent":["export const imgConfig = {\r\n    quality: 0.5,\r\n    maxWidth: 800,\r\n    maxHeight: 600,\r\n    autoRotate: true\r\n}\r\n\r\nexport const  firebaseConfig = {\r\n   \r\n        apiKey: \"AIzaSyCW7_WbZ_f96GjJsIOQpDdhCuJy3uFMNuQ\",\r\n        authDomain: \"mycontactapp-69594.firebaseapp.com\",\r\n        databaseURL: \"https://mycontactapp-69594.firebaseio.com\",\r\n        projectId: \"mycontactapp-69594\",\r\n        storageBucket: \"mycontactapp-69594.appspot.com\",\r\n        messagingSenderId: \"980024466685\",\r\n        appId: \"1:980024466685:web:c07a573064029e9c3ef294\",\r\n        measurementId: \"G-P8GX92HVV9\"\r\n      \r\n  };","import {createContext} from \"react\";\r\n\r\nexport const contactContext = createContext();","// https://firebase.google.com/docs/storage/web/upload-files#full_example\r\n// https://www.npmjs.com/package/browser-image-resizer#asyncawait\r\n\r\nimport React, { useState, useContext, useEffect } from \"react\";\r\nimport firebase from \"firebase/app\";\r\n\r\nimport {\r\n  Container,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Button,\r\n  Spinner,\r\n  Row,\r\n  Col\r\n} from \"reactstrap\";\r\n\r\n\r\n// to compress image before uploading to the server\r\nimport { readAndCompressImage } from \"browser-image-resizer\";\r\n\r\n// configs for image resizing\r\n\r\nimport { imgConfig } from \"../utils/Config\";\r\n\r\nimport { MdAddCircleOutline } from \"react-icons/md\";\r\n\r\nimport { v4 } from \"uuid\";\r\n\r\n// context stuffs\r\nimport { contactContext } from \"../context/Context\";\r\nimport { CONTACT_TO_UPDATE } from \"../context/Actiontype\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst AddContact = () => {\r\n  // destructuring state and dispatch from context state\r\n  const { state, dispatch } = useContext(contactContext);\r\n\r\n  const { contactToUpdate, contactToUpdateKey } = state;\r\n\r\n  // history hooks from react router dom to send to different page\r\n  const history = useHistory();\r\n\r\n  // simple state of all component\r\n  const [date, setDate] = useState(\"\");\r\n  const [time, setTime] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const [downloadUrl, setDownloadUrl] = useState(null);\r\n  const [star, setStar] = useState(false);\r\n  const [check, setCheck] = useState(false);\r\n  const [isUpdate, setIsUpdate] = useState(false);\r\n\r\n  // when their is the contact to update in the Context state\r\n  // then setting state with the value of the contact\r\n  // will changes only when the contact to update changes\r\n  useEffect(() => {\r\n    if (contactToUpdate) {\r\n      setDate(contactToUpdate.date);\r\n      setTime(contactToUpdate.time);\r\n      setDescription(contactToUpdate.description);\r\n      setStar(contactToUpdate.star);\r\n      setDownloadUrl(contactToUpdate.picture);\r\n\r\n      // also setting is update to true to make the update action instead the addContact action\r\n      setIsUpdate(true);\r\n    }\r\n  }, [contactToUpdate]);\r\n\r\n  // To upload image to firebase and then set the the image link in the state of the app\r\n  const imagePicker = async e => {\r\n    try {\r\n      const file = e.target.files[0];\r\n\r\n      var metadata = {\r\n        contentType: file.type\r\n      };\r\n      console.log(file.name)\r\n      console.log(file.type)\r\n      let resizedImage = await readAndCompressImage(file, imgConfig);\r\n\r\n     const storageRef = await firebase.storage().ref();\r\n      var uploadTask = storageRef\r\n        .child(\"images/\" + file.name)\r\n        .put(resizedImage, metadata);\r\n\r\n      uploadTask.on(\r\n        firebase.storage.TaskEvent.STATE_CHANGED,\r\n        snapshot => {\r\n          setIsUploading(true);\r\n          var progress =\r\n            (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n              \r\n          switch (snapshot.state) {\r\n            case firebase.storage.TaskState.PAUSED:\r\n              setIsUploading(false);\r\n              console.log(\"Uploading is paused\");\r\n              break;\r\n            case firebase.storage.TaskState.RUNNING:\r\n              console.log(\"Uploading is in progress...\");\r\n              break;\r\n          }\r\n          if (progress == 100) {\r\n            setIsUploading(false);\r\n            toast(\"uploaded\", { type: \"success\" });\r\n          }\r\n        },\r\n        error => {\r\n              \r\n          switch (error.code) {\r\n            case 'storage/unauthorized':\r\n            console.log(\"User doesn't have permission to access the object\")\r\n            break;\r\n            \r\n            case 'storage/canceled':\r\n            console.log(\"User canceled the upload\")\r\n            break;\r\n            \r\n            \r\n            \r\n            case 'storage/unknown':\r\n            console.log(\"Unknown error occurred, inspect error.serverResponse\")\r\n            break;\r\n            }\r\n\r\n          toast(\"something is wrong in state change\", { type: \"error\" });\r\n        },\r\n        () => {\r\n          uploadTask.snapshot.ref\r\n            .getDownloadURL()\r\n            .then(downloadURL => {\r\n              setDownloadUrl(downloadURL);\r\n            })\r\n            .catch(err => console.log(err));\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast(\"Something went wrong\", { type: \"error\" });\r\n    }\r\n  };\r\n\r\n  // setting contact to firebase DB\r\n  const addContact = async () => {\r\n    \r\n    try {\r\n      firebase\r\n        .database()\r\n        .ref(\"Contacts/\" + v4())\r\n        .set({\r\n          date,\r\n          time,\r\n          description,\r\n          picture: downloadUrl,\r\n          star\r\n        });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  // to handle update the contact when there is contact in state and the user had came from clicking the contact update icon\r\n  const updateContact = async () => {\r\n    \r\n    try {\r\n      firebase\r\n        .database()\r\n        .ref(\"Contacts/\" + contactToUpdateKey)\r\n        .set({\r\n          date,\r\n          time,\r\n          description,\r\n          picture: downloadUrl,\r\n          star\r\n        });\r\n    } catch (error) {\r\n      console.log(error);\r\n      toast(\"Oppss..\", { type: \"error\" });\r\n    }\r\n  };\r\n\r\n  // firing when the user click on submit button or the form has been submitted\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    isUpdate ? updateContact() : addContact();\r\n\r\n    toast(\"Success\", { type: \"success\" });\r\n    // isUpdate wll be true when the user came to update the contact\r\n    // when their is contact then updating and when no contact to update then adding contact\r\n  \r\n\r\n    // to handle the bug when the user visit again to add contact directly by visiting the link\r\n    dispatch({\r\n      type: CONTACT_TO_UPDATE,\r\n      payload: null,\r\n      key: null\r\n    });\r\n\r\n    // after adding/updating contact then sending to the contacts\r\n    \r\n    history.push(\"/\");\r\n  };\r\n\r\n  // return the spinner when the image has been added in the storage\r\n  // showing the update / add contact based on the  state\r\n  return (\r\n    <Container fluid className=\"mt-5\">\r\n      <Row>\r\n        <Col md=\"6\" className=\"offset-md-3 p-2\">\r\n          <Form onSubmit={handleSubmit}>\r\n            <div className=\"text-center\">\r\n              {isUploading ? (\r\n                <Spinner type=\"grow\" color=\"primary\" />\r\n              ) : (\r\n                <div>\r\n                  <label htmlFor=\"imagepicker\" className=\"\">\r\n                    <img src={downloadUrl} alt=\"\" className=\"profile\" />\r\n                  </label>\r\n                  <input\r\n                    type=\"file\"\r\n                    name=\"image\"\r\n                    id=\"imagepicker\"\r\n                    accept=\"image/*\"\r\n                    multiple={false}\r\n                    onChange={e => imagePicker(e)}\r\n                    className=\"hidden\"\r\n                  />\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            <FormGroup>\r\n              <Input\r\n                type=\"date\"\r\n                name=\"date\"\r\n                id=\"date\"\r\n                placeholder=\"\"\r\n                value={date}\r\n                onChange={e => setDate(e.target.value)}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Input\r\n                type=\"time\"\r\n                name=\"time\"\r\n                id=\"time\"\r\n                value={time}\r\n                onChange={e => setTime(e.target.value)}\r\n                placeholder=\"Email\"\r\n              />\r\n            </FormGroup>\r\n            \r\n            <FormGroup>\r\n              <Input\r\n                type=\"textarea\"\r\n                name=\"area\"\r\n                id=\"area\"\r\n                value={description}\r\n                onChange={e => setDescription(e.target.value)}\r\n                placeholder=\"Description\"\r\n              />\r\n            </FormGroup>\r\n            <FormGroup check>\r\n              <Label check>\r\n                <Input\r\n                  type=\"checkbox\"\r\n                  onChange={() => {\r\n                    setStar(!star);\r\n                  }}\r\n                  checked={star}\r\n                />{\" \"}\r\n                <span className=\"text-right\">Mark as Star</span>\r\n              </Label>\r\n            </FormGroup>\r\n            <Button\r\n              type=\"submit\"\r\n              color=\"primary\"\r\n              block\r\n              className=\"text-uppercase\"\r\n            >\r\n              {isUpdate ? \"Update Event\" : \"Add Event\"}\r\n            </Button>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AddContact;\r\n","export const SET_LOADING = \"SET_LOADING\";\r\nexport const SET_CONTACT = \"SET_CONTACT\";\r\nexport const CONTACT_TO_UPDATE = \"CONTACT_TO_UPDATE\";\r\nexport const SET_SINGLE_CONTACT = \"SET_SINGLE_CONTACT\";","import React from \"react\";\r\nimport {FaRegStar, FaStar , FaCheck, FaCheckDouble} from \"react-icons/fa\";\r\n\r\nimport {MdDelete, MdEdit} from \"react-icons/md\";\r\n\r\nimport firebase from \"firebase/app\"\r\nimport {contactContext} from \"../context/Context\"\r\nimport {CONTACT_TO_UPDATE, SET_SINGLE_CONTACT} from \"../context/Actiontype\"\r\n\r\n\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {toast} from \"react-toastify\";\r\nimport { useContext } from \"react\";\r\nimport {Col, Row} from \"reactstrap\"\r\n  \r\n\r\n\r\nconst Contact = ({contact, contactKey})=>{\r\n    const {dispatch} = useContext(contactContext);\r\n    const history = useHistory()\r\n\r\n    const deleteContact = ()=>{\r\n       firebase.database().ref(`Contacts/${contactKey}`).remove()\r\n       .then(()=>{\r\n           toast(\"DELETED SUCCESSFULLY\", {type:\"warning\"})\r\n       })\r\n       .catch(err=> console.log(err))\r\n    }\r\n\r\n\r\n    //ADDING A STAR\r\n    const updateImpContact = ()=>{\r\n        firebase.database().ref(`Contacts/${contactKey}`)\r\n        .update(\r\n            {\r\n                star:!contact.star\r\n            }, error=>{console.log(error)}\r\n        )\r\n        .then(()=>{\r\n            toast(\"Contact Updates\",{type:\"info\"} )\r\n        })\r\n        .catch(err=>console.log(err))\r\n    }\r\n\r\n//ADDING CHECK Sign\r\n  const checked = ()=>{\r\n    firebase.database().ref(`Contacts/${contactKey}`)\r\n    .update(\r\n      {\r\n     check:contact.check\r\n      }\r\n    )\r\n    .then(()=>{\r\n      toast(\"Contact Updates\",{type:\"info\"} )\r\n  })\r\n  }\r\n\r\n    const updateContact = ()=>{\r\n      dispatch({\r\n          type:CONTACT_TO_UPDATE,\r\n          payload:contact,\r\n          key:contactKey\r\n      })\r\n\r\n      history.push(\"/contact/add\")\r\n    }\r\n\r\n\r\n\r\n    const viewSingleContact = ()=>{\r\n        dispatch({\r\n            type:SET_SINGLE_CONTACT,\r\n            payload:contact\r\n        })\r\n        history.push(\"/contact/view\");\r\n    }\r\n    return (\r\n        <>\r\n          <Row>\r\n            <Col\r\n              md=\"1\"\r\n              className=\"d-flex justify-content-center align-items-center\"\r\n            >\r\n              <div className=\"icon\" onClick={() => updateImpContact()}>\r\n                {contact.star ? (\r\n                  <FaStar className=\" text-primary\" />\r\n                ) : (\r\n                  <FaRegStar className=\" text-info\" />\r\n                )}\r\n              </div>\r\n            </Col>\r\n            <Col\r\n              md=\"2\"\r\n              className=\"d-flex justify-content-center align-items-center\"\r\n            >\r\n              <img src={contact.picture} alt=\"\" className=\"img-circle profile\" />\r\n            </Col>\r\n            <Col md=\"8\" onClick={() => viewSingleContact(contact)}>\r\n              <div className=\"text-primary\">{contact.date}</div>\r\n              <div className=\"text-secondary\">\r\n                {contact.time}\r\n              </div>\r\n    \r\n              <div className=\"text-info\">{contact.description}</div>\r\n            </Col>\r\n            <Col\r\n              md=\"1\"\r\n              className=\"d-flex justify-content-center align-items-center\"\r\n            >\r\n              <MdDelete\r\n                onClick={() => deleteContact()}\r\n                color=\"danger\"\r\n                className=\"text-danger icon\"\r\n              />\r\n              <MdEdit\r\n                className=\"icon text-info ml-2\"\r\n                onClick={() => updateContact()}\r\n              />\r\n               \r\n            </Col>\r\n          </Row>\r\n        </>\r\n      );\r\n}\r\nexport default Contact;\r\n","import React, { useContext } from \"react\";\r\n\r\nimport { Container, ListGroup, ListGroupItem, Spinner } from \"reactstrap\";\r\nimport Contact from \"../components/Contact\";\r\nimport { MdAdd } from \"react-icons/md\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { contactContext } from \"../context/Context\";\r\nimport { CONTACT_TO_UPDATE } from \"../context/Actiontype\";\r\n\r\nconst Contacts = () => {\r\n  const { state, dispatch } = useContext(contactContext);\r\n\r\n  // destructuring contacts and isLoading from state\r\n  \r\n  const { contacts, isLoading } = state;\r\n  console.log(contacts)\r\n\r\n  // history hooks from react router dom to get history\r\n  const history = useHistory();\r\n\r\n  // handle fab icon button click\r\n  // will set in state of the contact to update and send it to the contact/add route\r\n  const AddContact = () => {\r\n    //TODO: use dispatch to send user to add contact screen\r\n    dispatch({\r\n      type: CONTACT_TO_UPDATE,\r\n      payload: null,\r\n      key: null\r\n    });\r\n    history.push(\"/contact/add\");\r\n  };\r\n\r\n  // return loading spinner\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"Center\">\r\n        <Spinner color=\"primary\" />\r\n        <div className=\"text-primary\">Loading...</div>\r\n      </div>\r\n    );\r\n  }\r\n      \r\n\r\n  return (\r\n    <Container className=\"mt-4\">\r\n      \r\n      {contacts.length === 0 && !isLoading ? (\r\n        <div className=\"Center text-large text-primary\">\r\n          NO Events found in firebase\r\n        </div>\r\n      ) : (\r\n        <ListGroup>\r\n          {Object.entries(contacts).map(([key, value]) => (\r\n            <ListGroupItem key={key}>\r\n              <Contact contact={value} contactKey={key} />\r\n            </ListGroupItem>\r\n          ))}\r\n        </ListGroup>\r\n      )}\r\n      <MdAdd className=\"fab icon \" onClick={AddContact} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Contacts;\r\n","\r\nimport React from \"react\";\r\nimport { Navbar, NavbarBrand, NavbarText } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <Navbar color=\"info\" light>\r\n      <NavbarBrand tag={Link} to=\"/\" className=\"text-white\">Event Management App</NavbarBrand>\r\n      <NavbarText className=\"text-white float-right\">\r\n        A simple event manage app\r\n      </NavbarText>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","//TODO: Export the Footer\r\nimport React from \"react\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className=\"bg-info text-center pt-3 pb-2 mt-5 sticky-bottom footer\">\r\n      A simple Event Management App\r\n    </footer>\r\n  );\r\n};\r\nexport default Footer;","import React, { useContext } from \"react\";\r\n\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  CardSubtitle\r\n} from \"reactstrap\";\r\nimport { FaClock, FaMapMarkerAlt, } from \"react-icons/fa\";\r\nimport { contactContext } from \"../context/Context\";\r\n\r\nconst ViewContact = () => {\r\n  const { state } = useContext(contactContext);\r\n  // destructuring contact from the state\r\n  // and rendering it in state\r\n  const {contact} = state;\r\n  return (\r\n    <Container>\r\n      <Row className=\"mt-5 mb-5\">\r\n        <Col md=\"5\" className=\"offset-md-3\">\r\n          <Card className=\"pt-3 pb-5\">\r\n            <CardBody className=\"text-center \">\r\n              <img\r\n                height=\"150\"\r\n                width=\"150\"\r\n                className=\"cardImg profile border-danger\"\r\n                src={contact?.picture}\r\n              />\r\n              <CardTitle className=\"text-primary mt-3\">\r\n                <h1>{contact?.date}</h1>\r\n              </CardTitle>\r\n             \r\n              <a\r\n                className=\"btn btn-primary btn-block\"\r\n                target=\"_blank\"\r\n              >\r\n                <FaClock className=\"icon mr-2\" />\r\n                {contact?.time}\r\n              </a>\r\n\r\n              <a\r\n                className=\"btn btn-primary btn-block\"\r\n                target=\"_blank\"\r\n              >\r\n                {contact?.description}\r\n              </a>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ViewContact;\r\n","import React from \"react\";\r\n\r\nconst PageNotFound = () => {\r\n  return (\r\n    <div>\r\n      <h1>404 page not found</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default PageNotFound;\r\n","import {SET_CONTACT, SET_LOADING, CONTACT_TO_UPDATE, SET_SINGLE_CONTACT} from \"./Actiontype.js\";\r\n\r\n\r\n//USE SWITCH CASE\r\nexport default (state, action)=>{\r\n    switch (action.type) {\r\n        case SET_CONTACT:\r\n          return action.payload == null ? {...state, contacts:[]} \r\n          :{...state, contacts:action.payload}\r\n        case SET_LOADING:\r\n            return {...state, isLoading:action.payload }\r\n        case CONTACT_TO_UPDATE:\r\n            return {\r\n                ...state,\r\n                 contactToUpdate : action.payload,\r\n                 contactToUpdateKey : action.key\r\n            }\r\n        case SET_SINGLE_CONTACT:\r\n            return{\r\n                ...state,\r\n                contact: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import React, { useReducer, useEffect } from \"react\";\n\nimport { Container, Col, Row } from \"reactstrap\";\n\n// react-router-dom3\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\n// react toastify stuffs\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n// bootstrap css\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\n\n//TODO: DONE impor\nimport { firebaseConfig } from \"./utils/Config\";\nimport firebase from \"firebase/app\";\nimport \"firebase/database\";\nimport \"firebase/storage\";\n\n// components\nimport AddContact from \"./pages/AddContact\";\nimport Contacts from \"./pages/Contacts\";\nimport Header from \"./layout/Header\";\nimport Footer from \"./layout/Footer\";\nimport ViewContact from \"./pages/ViewContact\";\nimport PageNotFound from \"./pages/PageNotFound\";\n\n// context api stuffs\n\nimport reducer from \"./context/Reducer\";\nimport { contactContext } from \"./context/Context\";\nimport { SET_CONTACT, SET_LOADING } from \"./context/Actiontype\";\n\n//initlizeing firebase app with the firebase config which are in ./utils/firebaseConfig\n\nfirebase.initializeApp(firebaseConfig);\n\n// first state to provide in react reducer\nconst initialState = {\n  contacts: [],\n  contact: {},\n  contactToUpdate: null,\n  contactToUpdateKey: null,\n  isLoading: false\n};\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  // will get contacts from firebase and set it on state contacts array\n  const getContacts = async () => {\n   \n    dispatch({\n      type: SET_LOADING,\n      payload: true\n    });\n\n    const contactsRef = await firebase.database().ref(\"/Contacts\");\n    console.log(contactsRef)\n    contactsRef.on(\"value\", snapshot => {\n      dispatch({\n        type: SET_CONTACT,\n        payload: snapshot.val()\n      });\n      dispatch({\n        type: SET_LOADING,\n        payload: false\n      });\n    });\n  };\n\n  // getting contact  when component did mount\n  useEffect(() => {\n    getContacts();\n  }, []);\n\n  return (\n    <Router>\n      <contactContext.Provider value={{ state, dispatch }}>\n        <ToastContainer />\n        <Header />\n        <Container>\n          <Switch>\n            <Route exact path=\"/contact/add\" component={AddContact} />\n            <Route exact path=\"/contact/view\" component={ViewContact} />\n            <Route exact path=\"/\" component={Contacts} />\n            <Route exact path=\"*\" component={PageNotFound} />\n          </Switch>\n        </Container>\n\n        <Footer />\n      </contactContext.Provider>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}